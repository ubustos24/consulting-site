import { useMemo, useState } from "react";
import {
  AlignmentType,
  Document,
  HeadingLevel,
  Packer,
  Paragraph,
  Table,
  TableCell,
  TableRow,
  TextRun,
  WidthType,
} from "docx";

/** â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 * Research Source Docs â€“ Source Builder (React + docx)
 * - DD MMM YYYY dates (e.g., 28 Aug 2025)
 * - Strict date validation (blocks impossible YYYY-MM-DD)
 * - ALCOA correct: Attributable, Legible, Contemporaneous, Original, Accurate
 * - Ownership notice in UI + embedded in DOCX
 * - Terms / License modal gating the download
 * - Custom Visit using pickable modules + ad-hoc
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */

const BRAND = {
  name: "Research Source Docs",
  disclaimer:
    "Complete in real time. Correct with single line, date/initial. Use 24-hr time. Do not record PHI beyond protocol requirements.",
};

const OWNER_NOTICE =
  "Â© " +
  new Date().getFullYear() +
  " Research Source Docs. All rights reserved. Unauthorized reproduction or redistribution is prohibited.";

// Full terms shown in the modal
const TERMS_TEXT = `
By using this tool and the generated templates, you agree to the following:
1) Ownership: The tool and all default template text are Â© ${new Date().getFullYear()} Research Source Docs. All rights reserved. Unauthorized reproduction or redistribution is prohibited.
2) License: You may generate and adapt templates for use at your clinical research site(s) and protocol(s). You may not resell the tool or distribute default templates as a competing product or library.
3) No Legal/Regulatory Advice: Templates are provided â€œas-isâ€ for operational guidance only and must be reviewed and adapted to each protocol/IRB/SOP. No warranty of compliance or fitness for a particular purpose is expressed or implied.
4) Data Handling: The tool runs locally in your browser and does not transmit your input to a server. You are responsible for preventing PHI entry beyond protocol requirements and for safeguarding any generated documents.
5) Indemnity: You agree to use the tool at your own risk and to hold harmless the author(s) and Research Source Docs from claims arising out of your use.
`;

type Fields = {
  protocol?: string;
  title?: string;
  site?: string;
  pi?: string;
  subjectId?: string;
  initials?: string;
  visit?: string;
  visitDate?: string; // input as YYYY-MM-DD, displayed as DD MMM YYYY
};

type State = {
  includeVitals: boolean;
  includeECG: boolean;
  ecgNA: boolean;
  includeLabs: boolean;
  includePE: boolean;
  includeConMeds: boolean;
  includeAE: boolean;
  includeAccountability: boolean;
  includeRandomization: boolean;
  includePK: boolean;
  includeImaging: boolean;
  includeQuestionnaires: boolean;
  includeUnscheduled: boolean;
  adHocTitle: string;
  adHocLines: string[];
};

// Use 3-letter Title Case months for display like "28 Aug 2025"
const monthNames = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec",
];

/** Strictly format YYYY-MM-DD into "DD MMM YYYY".
 * If input is not valid ISO or is an impossible date, return the raw input.
 */
function formatResearchDate(dateStr?: string) {
  if (!dateStr) return "";
  const m = /^(\d{4})-(\d{2})-(\d{2})$/.exec(dateStr.trim());
  if (!m) return dateStr;
  const [_, y, mm, dd] = m;
  const year = Number(y),
    month = Number(mm),
    day = Number(dd);
  if (month < 1 || month > 12) return dateStr;
  if (day < 1 || day > 31) return dateStr;
  const d = new Date(Date.UTC(year, month - 1, day));
  const isSame =
    d.getUTCFullYear() === year &&
    d.getUTCMonth() === month - 1 &&
    d.getUTCDate() === day;
  if (!isSame) return dateStr;
  return `${String(day).padStart(2, "0")} ${monthNames[month - 1]} ${year}`;
}

/** Validate a strict real calendar date in YYYY-MM-DD. */
function isValidISODateStrict(s?: string) {
  if (!s) return true; // allow blank while drafting
  const m = /^(\d{4})-(\d{2})-(\d{2})$/.exec(s.trim());
  if (!m) return false;
  const [_, y, mm, dd] = m;
  const year = Number(y),
    month = Number(mm),
    day = Number(dd);
  if (month < 1 || month > 12) return false;
  if (day < 1 || day > 31) return false;
  const d = new Date(Date.UTC(year, month - 1, day));
  return (
    d.getUTCFullYear() === year &&
    d.getUTCMonth() === month - 1 &&
    d.getUTCDate() === day
  );
}

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ DOCX helpers
const L = (t: string) => new TextRun({ text: t, bold: true });
const Para = (
  text: string,
  opts: Partial<ConstructorParameters<typeof Paragraph>[0]> = {}
) => new Paragraph({ text, ...opts });
const Bullet = (text: string) =>
  new Paragraph({ text, bullet: { level: 0 } });

function HeaderTable(f: Fields) {
  return new Table({
    width: { size: 100, type: WidthType.PERCENTAGE },
    rows: [
      new TableRow({
        children: [
          new TableCell({
            children: [
              new Paragraph({
                children: [L("Protocol No: "), new TextRun(f.protocol || " ")],
              }),
              new Paragraph({
                children: [L("Protocol Title: "), new TextRun(f.title || " ")],
              }),
              new Paragraph({
                children: [
                  L("Site No: "),
                  new TextRun(f.site || " "),
                  new TextRun("    "),
                  L("PI: "),
                  new TextRun(f.pi || " "),
                ],
              }),
            ],
          }),
          new TableCell({
            children: [
              new Paragraph({
                children: [
                  L("Subject ID: "),
                  new TextRun(f.subjectId || " "),
                  new TextRun("    "),
                  L("Initials: "),
                  new TextRun(f.initials || " "),
                ],
              }),
              new Paragraph({
                children: [L("Visit: "), new TextRun(f.visit || " ")],
              }),
              new Paragraph({
                children: [
                  L("Visit Date: "),
                  new TextRun(formatResearchDate(f.visitDate)),
                ],
              }),
            ],
          }),
        ],
      }),
    ],
  });
}

function Section(title: string) {
  return new Paragraph({
    text: title,
    heading: HeadingLevel.HEADING_2,
    spacing: { before: 220, after: 120 },
  });
}

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Individual module builders (DOCX)
function buildVitals() {
  return [
    Section("Vitals & Focused Assessment"),
    Bullet("Position: Sitting â˜  Supine â˜  Standing â˜    Device: ______"),
    Bullet(
      "Time ____:____    HR ___ bpm    BP ___/___ mmHg    RR ___ /min"
    ),
    Bullet("Temperature ___ Â°C ( ___ Â°F )   SpOâ‚‚ ___ %"),
    Bullet(
      "Focused exam if indicated (systems): General / HEENT / Cardiac / Respiratory / Abdomen / Neuro / Skin"
    ),
    Para(
      "Investigator assessment (if required by protocol): â˜ Clinically Significant  â˜ Not Clinically Significant"
    ),
    Para(
      "Investigator Signature (printed & signed): ______________________    Date: ___/___/______"
    ),
  ];
}

function buildECG(na: boolean) {
  return [
    Section("12-Lead ECG"),
    na
      ? Para("ECG not applicable this visit per protocol.")
      : Bullet("Resting, supine â‰¥5 min; collect prior to bloods whenever feasible."),
    Bullet("Device/Lead Placement per site SOP; QTc method ______"),
    Bullet(
      "Time (24-hr): ____:____   Result: Normal â˜  Abnormal (NCS) â˜  Abnormal (CS) â˜"
    ),
    Para("Investigator interpretation: ____________________________________________"),
    Para("Investigator Signature: ______________________    Date: ___/___/______"),
  ];
}

function buildLabs(includePK: boolean) {
  const rows = [
    Bullet("Chemistry â–¡   Hematology â–¡   Urinalysis â–¡   Other: ____________"),
    Bullet(
      "Sample taken?  Yes â˜  No â˜    Time (24-hr): ____:____    Fasting? Yes â˜  No â˜"
    ),
    Bullet("Collector: __________________   Notes: __________________________________"),
  ];
  if (includePK) {
    rows.push(
      Bullet(
        "PK collected?  Yes â˜  No â˜    Time (24-hr): ____:____    Pre-dose â˜  Post-dose â˜  Interval: ______"
      )
    );
    rows.push(
      Bullet("Biomarker(s): __________________    Notes: ______________________________")
    );
  }
  return [Section("Laboratory / Specimen Collection"), ...rows];
}

function buildPE() {
  return [
    Section("Physical Exam"),
    Bullet(
      "Systems reviewed: General / HEENT / Cardiac / Respiratory / Abdomen / Neuro / Skin / Musculoskeletal / Other"
    ),
    Para("Findings: ______________________________________________________________"),
    Para("Investigator Signature: ______________________    Date: ___/___/______"),
  ];
}

function buildConMeds() {
  return [
    Section("Concomitant Medications"),
    Bullet(
      "Start Date | Stop Date | Medication | Indication | Dose/Route/Frequency | Ongoing? | Notes"
    ),
  ];
}

function buildAE() {
  return [
    Section("Adverse Events"),
    Bullet(
      "Onset | End | Description | Severity (Mild/Mod/Sev) | Relationship (Unrelated/Possible/Probable) | Action Taken | Outcome | Reported (date)"
    ),
  ];
}

function buildAccountability() {
  return [
    Section("Investigational Product Accountability"),
    Bullet("Dispensed: Date | Time | Lot/Kit | Quantity | Instructions given"),
    Bullet("Returns/Reconciliation: Date | Quantity | Condition | Notes"),
  ];
}

function buildRandomization() {
  return [
    Section("Randomization / Enrollment"),
    Bullet("Eligibility confirmed and documented"),
    Bullet(
      "Randomization date/time ____/____/______  ____:____    System: ______    Code: ______"
    ),
    Bullet("Stratification factors (if applicable)"),
    Bullet("Enrollment confirmation sent to sponsor/CRO (date)"),
  ];
}

function buildImaging() {
  return [
    Section("Imaging"),
    Bullet(
      "Modality: ______  Site Machine ID: ______  Calibration check done â˜"
    ),
    Bullet(
      "Time (24-hr): ____:____  Reader: ______   Upload/Transfer completed â˜"
    ),
  ];
}

function buildQuestionnaires() {
  return [
    Section("Patient-Reported Outcomes / Questionnaires"),
    Bullet(
      "Instruments completed: ____________   Version: ______    Language: ______"
    ),
    Bullet("Administered before study procedures (per protocol) â˜"),
  ];
}

function buildUnscheduled() {
  return [
    Section("Unscheduled Procedures / Notes"),
    Bullet(
      "Reason for unscheduled contact/visit: ________________________________"
    ),
    Bullet(
      "Procedures performed and outcomes: ___________________________________"
    ),
  ];
}

function buildAdHoc(title: string, lines: string[]) {
  return [
    Section(title || "Ad-hoc Module"),
    ...((lines.length ? lines : ["Describe procedure / fields below"]).map(
      (t) => Bullet(t)
    )),
  ];
}

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Build full document
function buildDoc(fields: Fields, s: State) {
  const children: (Paragraph | Table)[] = [
    new Paragraph({
      text: BRAND.name,
      heading: HeadingLevel.HEADING_1,
      alignment: AlignmentType.LEFT,
    }),
    new Paragraph({ text: "Source Version: v1.0", spacing: { after: 120 } }),
    HeaderTable(fields),
    Para(BRAND.disclaimer),
    Para(OWNER_NOTICE), // embed ownership notice in the DOCX
  ];

  if (s.includeVitals) children.push(...buildVitals());
  if (s.includeECG) children.push(...buildECG(s.ecgNA));
  if (s.includePE) children.push(...buildPE());
  if (s.includeLabs) children.push(...buildLabs(s.includePK));
  if (s.includeConMeds) children.push(...buildConMeds());
  if (s.includeAE) children.push(...buildAE());
  if (s.includeAccountability) children.push(...buildAccountability());
  if (s.includeRandomization) children.push(...buildRandomization());
  if (s.includeImaging) children.push(...buildImaging());
  if (s.includeQuestionnaires) children.push(...buildQuestionnaires());
  if (s.includeUnscheduled) children.push(...buildUnscheduled());
  if (s.adHocTitle || s.adHocLines.length)
    children.push(...buildAdHoc(s.adHocTitle, s.adHocLines));

  return new Document({ sections: [{ properties: {}, children }] });
}

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Browser download helper
function downloadBlob(blob: Blob, filename: string) {
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  setTimeout(() => {
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, 0);
}

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ UI
export default function SourceBuilderApp() {
  const [fields, setFields] = useState<Fields>({});
  const [mods, setMods] = useState<State>({
    includeVitals: true,
    includeECG: true,
    ecgNA: false,
    includeLabs: true,
    includePE: true,
    includeConMeds: true,
    includeAE: true,
    includeAccountability: false,
    includeRandomization: false,
    includePK: false,
    includeImaging: false,
    includeQuestionnaires: false,
    includeUnscheduled: false,
    adHocTitle: "",
    adHocLines: [],
  });

  const [showTerms, setShowTerms] = useState(false);
  const [acceptedTerms, setAcceptedTerms] = useState(false);
  const [agreeChecked, setAgreeChecked] = useState(false);

  const filename = useMemo(() => {
    const safe = (s?: string) =>
      (s || "").trim().replace(/[^a-z0-9]+/gi, "_").slice(0, 40);
    return `${
      safe(fields.protocol) || "protocol"
    }_${safe(fields.visit) || "visit"}_source.docx`;
  }, [fields.protocol, fields.visit]);

  const selected = useMemo(() => {
    const items: string[] = [];
    if (mods.includeVitals) items.push("Vitals & Assessment");
    if (mods.includeECG) items.push(mods.ecgNA ? "ECG (N/A)" : "ECG");
    if (mods.includePE) items.push("Physical Exam");
    if (mods.includeLabs) items.push(mods.includePK ? "Labs + PK" : "Labs");
    if (mods.includeConMeds) items.push("Con Meds");
    if (mods.includeAE) items.push("Adverse Events");
    if (mods.includeAccountability) items.push("Drug Accountability");
    if (mods.includeRandomization) items.push("Randomization/Enrollment");
    if (mods.includeImaging) items.push("Imaging");
    if (mods.includeQuestionnaires) items.push("Questionnaires");
    if (mods.includeUnscheduled) items.push("Unscheduled");
    if (mods.adHocTitle || mods.adHocLines.length)
      items.push(`Ad-hoc: ${mods.adHocTitle || "Untitled"}`);
    return items;
  }, [mods]);

  const dateValid = useMemo(
    () => isValidISODateStrict(fields.visitDate),
    [fields.visitDate]
  );

  async function handleDownload() {
    if (!dateValid) {
      alert(
        "Visit Date is invalid. Please enter a real date in YYYY-MM-DD (e.g., 2025-08-28)."
      );
      return;
    }
    if (!acceptedTerms) {
      setShowTerms(true);
      return;
    }
    const doc = buildDoc(fields, mods);
    const blob = await Packer.toBlob(doc);
    downloadBlob(blob, filename);
  }

  function handleAcceptTerms() {
    if (!agreeChecked) return;
    setAcceptedTerms(true);
    setShowTerms(false);
    setAgreeChecked(false);
    // Optionally trigger download right after acceptance:
    // (Uncomment to auto-continue)
    // handleDownload();
  }

  return (
    <div className="min-h-screen bg-white text-slate-900">
      {/* Terms Modal */}
      {showTerms && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40 p-4">
          <div className="bg-white rounded-2xl shadow-xl max-w-2xl w-full p-6">
            <h2 className="text-xl font-semibold">Terms & License</h2>
            <pre className="whitespace-pre-wrap text-sm text-slate-700 mt-3 max-h-64 overflow-auto border rounded-md p-3 bg-slate-50">
{TERMS_TEXT}
            </pre>
            <label className="flex items-center gap-2 mt-4 text-sm">
              <input
                type="checkbox"
                checked={agreeChecked}
                onChange={(e) => setAgreeChecked(e.target.checked)}
              />
              I have read and agree to the Terms & License.
            </label>
            <div className="mt-4 flex gap-2 justify-end">
              <button
                className="px-4 py-2 rounded-lg border"
                onClick={() => {
                  setShowTerms(false);
                  setAgreeChecked(false);
                }}
              >
                Cancel
              </button>
              <button
                className={
                  "px-4 py-2 rounded-lg " +
                  (agreeChecked
                    ? "bg-blue-600 text-white"
                    : "bg-slate-300 text-slate-600 cursor-not-allowed")
                }
                onClick={handleAcceptTerms}
                disabled={!agreeChecked}
              >
                Accept & Continue
              </button>
            </div>
          </div>
        </div>
      )}

      <header className="sticky top-0 z-20 bg-white/90 backdrop-blur border-b">
        <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
          <div className="font-semibold tracking-tight">
            {BRAND.name} â€“ Builder
          </div>
          <div className="text-xs text-slate-600">
            ALCOA: Attributable Â· Legible Â· Contemporaneous Â· Original Â· Accurate
          </div>
        </div>
      </header>

      <main className="max-w-6xl mx-auto px-4 py-6 grid lg:grid-cols-2 gap-8">
        {/* LEFT: Form */}
        <section className="space-y-4">
          <h1 className="text-2xl font-bold">Custom Visit</h1>
          <p className="text-sm text-slate-600">
            Fill the fields, pick modules, and download a .docx. Visit Date
            input is <b>YYYY-MM-DD</b> and displays as <b>DD MMM YYYY</b> (e.g.,
            28 Aug 2025). No data leaves your browser.
          </p>

          {/* Header fields */}
          <div className="grid sm:grid-cols-2 gap-3">
            {(
              [
                ["protocol", "Protocol No"],
                ["title", "Protocol Title"],
                ["site", "Site No"],
                ["pi", "PI (printed)"],
                ["subjectId", "Subject ID"],
                ["initials", "Initials"],
                ["visit", "Visit"],
                ["visitDate", "Visit Date (YYYY-MM-DD)"],
              ] as const
            ).map(([key, label]) => (
              <label key={key} className="text-sm">
                <div className="text-slate-700 mb-1 font-medium">{label}</div>
                <input
                  className={
                    "w-full rounded border px-3 py-2 " +
                    (key === "visitDate" && !dateValid ? "border-red-500" : "")
                  }
                  value={(fields as any)[key] || ""}
                  onChange={(e) =>
                    setFields((s) => ({ ...s, [key]: e.target.value }))
                  }
                  placeholder={key === "visitDate" ? "2025-08-28" : undefined}
                />
                {key === "visitDate" && !dateValid && (
                  <div className="text-xs text-red-600 mt-1">
                    Enter a real date in YYYY-MM-DD (e.g., 2025-08-28). Month
                    must be 01â€“12; day must be valid.
                  </div>
                )}
              </label>
            ))}
          </div>

          {/* Module checkboxes */}
          <div className="mt-4 space-y-2">
            <h2 className="font-semibold">Modules</h2>

            <div className="grid sm:grid-cols-2 gap-2 text-sm">
              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={mods.includeVitals}
                  onChange={(e) =>
                    setMods({ ...mods, includeVitals: e.target.checked })
                  }
                />
                Vitals & Focused Assessment
              </label>

              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={mods.includeECG}
                  onChange={(e) =>
                    setMods({ ...mods, includeECG: e.target.checked })
                  }
                />
                12-Lead ECG
              </label>

              {mods.includeECG && (
                <label className="ml-6 flex items-center gap-2 text-slate-600">
                  <input
                    type="checkbox"
                    checked={mods.ecgNA}
                    onChange={(e) =>
                      setMods({ ...mods, ecgNA: e.target.checked })
                    }
                  />
                  ECG Not Applicable (this visit)
                </label>
              )}

              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={mods.includeLabs}
                  onChange={(e) =>
                    setMods({ ...mods, includeLabs: e.target.checked })
                  }
                />
                Labs / Specimen Collection
              </label>

              <label className="ml-6 flex items-center gap-2 text-slate-600">
                <input
                  type="checkbox"
                  checked={mods.includePK}
                  onChange={(e) =>
                    setMods({ ...mods, includePK: e.target.checked })
                  }
                />
                Include PK / Biomarkers
              </label>

              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={mods.includePE}
                  onChange={(e) =>
                    setMods({ ...mods, includePE: e.target.checked })
                  }
                />
                Physical Exam (Investigator only)
              </label>

              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={mods.includeConMeds}
                  onChange={(e) =>
                    setMods({ ...mods, includeConMeds: e.target.checked })
                  }
                />
                Concomitant Medications
              </label>

              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={mods.includeAE}
                  onChange={(e) =>
                    setMods({ ...mods, includeAE: e.target.checked })
                  }
                />
                Adverse Events
              </label>

              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={mods.includeAccountability}
                  onChange={(e) =>
                    setMods({
                      ...mods,
                      includeAccountability: e.target.checked,
                    })
                  }
                />
                Drug Accountability
              </label>

              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={mods.includeRandomization}
                  onChange={(e) =>
                    setMods({
                      ...mods,
                      includeRandomization: e.target.checked,
                    })
                  }
                />
                Randomization / Enrollment
              </label>

              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={mods.includeImaging}
                  onChange={(e) =>
                    setMods({ ...mods, includeImaging: e.target.checked })
                  }
                />
                Imaging
              </label>

              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={mods.includeQuestionnaires}
                  onChange={(e) =>
                    setMods({
                      ...mods,
                      includeQuestionnaires: e.target.checked,
                    })
                  }
                />
                Questionnaires / PROs
              </label>

              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={mods.includeUnscheduled}
                  onChange={(e) =>
                    setMods({
                      ...mods,
                      includeUnscheduled: e.target.checked,
                    })
                  }
                />
                Unscheduled / Notes
              </label>
            </div>
          </div>

          {/* Ad-hoc module */}
          <div className="mt-4 space-y-2">
            <h2 className="font-semibold">Ad-hoc Module</h2>
            <label className="block text-sm">
              <div className="text-slate-700 mb-1">Title</div>
              <input
                className="w-full rounded border px-3 py-2"
                value={mods.adHocTitle}
                onChange={(e) =>
                  setMods({ ...mods, adHocTitle: e.target.value })
                }
                placeholder="e.g., Device Check, Diary Review, etc."
              />
            </label>
            <label className="block text-sm">
              <div className="text-slate-700 mb-1">Bullets (one per line)</div>
              <textarea
                className="w-full rounded border px-3 py-2 h-24"
                value={mods.adHocLines.join("\n")}
                onChange={(e) =>
                  setMods({
                    ...mods,
                    adHocLines: e.target.value
                      .split("\n")
                      .map((s) => s.trim())
                      .filter(Boolean),
                  })
                }
                placeholder="- Describe step 1
- Describe step 2"
              />
            </label>
          </div>

          <div className="flex items-center gap-3 pt-2">
            <button
              onClick={handleDownload}
              disabled={!dateValid}
              className={
                "rounded-lg px-4 py-2 " +
                (dateValid
                  ? "bg-blue-600 text-white"
                  : "bg-slate-300 text-slate-600 cursor-not-allowed")
              }
              title={
                dateValid
                  ? acceptedTerms
                    ? "Download .docx"
                    : "Youâ€™ll need to accept the Terms first"
                  : "Enter a valid date first"
              }
            >
              {acceptedTerms ? "Download .docx" : "Continue to Terms â†’"}
            </button>

            <button
              className="text-sm underline"
              onClick={() => setShowTerms(true)}
            >
              View Terms
            </button>
          </div>

          <div className="text-xs text-slate-500 pt-4">
            ALCOA: Attributable Â· Legible Â· Contemporaneous Â· Original Â· Accurate
          </div>
          <div className="text-xs text-slate-500 pt-2">{OWNER_NOTICE}</div>
        </section>

        {/* RIGHT: Preview */}
        <section className="min-h-[300px]">
          <div className="prose max-w-none">
            <h2 className="text-xl font-semibold mt-2">Preview</h2>
            <div className="mt-2 p-4 border rounded-lg">
              <div className="text-sm text-gray-600">
                {BRAND.name} Â· Source v1.0
              </div>
              <div className="grid md:grid-cols-2 gap-2 text-sm mt-2">
                <div>
                  <span className="font-semibold">Protocol No:</span>{" "}
                  {fields.protocol || ""}
                </div>
                <div>
                  <span className="font-semibold">Protocol Title:</span>{" "}
                  {fields.title || ""}
                </div>
                <div>
                  <span className="font-semibold">Site No:</span>{" "}
                  {fields.site || ""}
                </div>
                <div>
                  <span className="font-semibold">PI:</span> {fields.pi || ""}
                </div>
                <div>
                  <span className="font-semibold">Subject ID:</span>{" "}
                  {fields.subjectId || ""}
                </div>
                <div>
                  <span className="font-semibold">Initials:</span>{" "}
                  {fields.initials || ""}
                </div>
                <div>
                  <span className="font-semibold">Visit:</span>{" "}
                  {fields.visit || ""}
                </div>
                <div>
                  <span className="font-semibold">Visit Date:</span>{" "}
                  {formatResearchDate(fields.visitDate)}
                </div>
              </div>
              <div className="text-sm mt-2 italic">{BRAND.disclaimer}</div>
              <h3 className="font-semibold mt-4">Modules included</h3>
              <ul className="list-disc ml-5 text-sm">
                {selected.map((t) => (
                  <li key={t}>{t}</li>
                ))}
              </ul>
              <div className="text-xs text-slate-500 mt-3">{OWNER_NOTICE}</div>
            </div>
          </div>
        </section>
      </main>

      <footer className="py-8 border-t text-center text-sm text-slate-600">
        Â© {new Date().getFullYear()} {BRAND.name} Â·{" "}
        ALCOA: Attributable Â· Legible Â· Contemporaneous Â· Original Â· Accurate
      </footer>
    </div>
  );
}
